head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2007.02.27.21.15.30;	author mwade;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@{\rtf1\ansi\ansicpg1252\deff0
{\fonttbl
{\f0\fnil\fcharset0\fprq0\fttruetype Times New Roman;}
{\f1\fnil\fcharset0\fprq0\fttruetype Bitstream Vera Sans;}
{\f2\fnil\fcharset0\fprq0\fttruetype Dingbats;}
{\f3\fnil\fcharset0\fprq0\fttruetype Symbol;}
{\f4\fnil\fcharset0\fprq0\fttruetype Courier New;}}
{\colortbl
\red0\green0\blue0;
\red255\green255\blue255;}
{\stylesheet
{\s1\fi-430\li720\sbasedon28\snext28 Contents 1;}
{\s2\fi-430\li1440\sbasedon28\snext28 Contents 2;}
{\s3\fi-430\li2160\sbasedon28\snext28 Contents 3;}
{\s8\fi-430\li720\sbasedon28 Lower Roman List;}
{\s5\tx431\sbasedon24\snext28 Numbered Heading 1;}
{\s6\tx431\sbasedon25\snext28 Numbered Heading 2;}
{\s7\fi-430\li720 Square List;}
{\*\cs11\sbasedon28 Endnote Text;}
{\s4\fi-430\li2880\sbasedon28\snext28 Contents 4;}
{\s9\fi-430\li720 Diamond List;}
{\s10\fi-430\li720 Numbered List;}
{\*\cs12\fs20\super Endnote Reference;}
{\s13\fi-430\li720 Triangle List;}
{\s14\tx431\sbasedon26\snext28 Numbered Heading 3;}
{\s15\fi-430\li720 Dashed List;}
{\s16\fi-430\li720\sbasedon10 Upper Roman List;}
{\s17\sb440\sa60\f1\fs24\b\sbasedon28\snext28 Heading 4;}
{\s18\fi-430\li720 Heart List;}
{\s34\fi-430\li720 Box List;}
{\s20\fi-430\li720\sbasedon10 Upper Case List;}
{\s21\fi-430\li720 Bullet List;}
{\s22\fi-430\li720 Hand List;}
{\*\cs23\fs20\sbasedon28 Footnote Text;}
{\s24\sb440\sa60\f1\fs34\b\sbasedon28\snext28 Heading 1;}
{\s25\sb440\sa60\f1\fs28\b\sbasedon28\snext28 Heading 2;}
{\s19\qc\sb240\sa119\f1\fs32\b\sbasedon28\snext28 Contents Header;}
{\s27\fi-430\li720 Tick List;}
{\s26\sb440\sa60\f1\fs24\b\sbasedon28\snext28 Heading 3;}
{\s29\fi-430\li720\sbasedon10 Lower Case List;}
{\s30\li1440\ri1440\sa119\sbasedon28 Block Text;}
{\s36\f4\sbasedon28 Plain Text;}
{\s32\tx1584\sbasedon5\snext28 Section Heading;}
{\s33\fi-430\li720 Implies List;}
{\s28\f0\fs24\lang1033 Normal;}
{\s35\fi-430\li720 Star List;}
{\*\cs31\fs20\super Footnote Reference;}
{\s37\tx1584\sbasedon5\snext28 Chapter Heading;}}
\kerning0\cf0\ftnbj\fet2\ftnstart1\ftnnar\aftnnar\ftnstart1\aftnstart1\aenddoc\facingp\titlepg\revprop3{\info}\deftab720\viewkind1\paperw12240\paperh15840\margl1440\margr1440\widowctl
\sectd\sbknone\colsx360\pgncont\ltrsect
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Michael Wade}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Machine Learning}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Dr. Novobilski}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\qc\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Solving Sudoku With A*}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab   Sudoku, a popular number puzzle that originated in Japan, has quickly gained popularity at an international level.  The classic version of the puzzle is a 9x9 box grid filled in with the digits 1 to 9 on every row, column, and 3x3 region.  In an unsolved grid, some of the boxes are left blank for the player to fill in.  The rule is that every row, column, and 3x3 region must contain the digits from 1 to 9 without repetition of any digit.  Prima facie, the puzzle appears to be linearly complex with the increase in blank slots; but on closer inspection, the amount of blanks is not nearly as important as their placing.}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \tab }{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Classic Sudoku problems (a 9x9 grid) is solvable in a finite amount of time by a human being with just a pencil and a cup of coffee.  However, the problem itself is known to be NP-Complete.  As with any NP-Complete problem, the methods at which computer scientists will attempt to solve the problem are vast.  This document is a review of a particular attempt to solve the problem using the A* algorithm.  A particularly popular algorithm in the gaming industry, A* is used widely for it's ability to solve path planning problems with reasonable efficiency.  }{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The components of A* are the open/closed lists and the scoring of each node.  Given any search space made of nodes (blanks on puzzle), the algorithm maintains a list of closed and open nodes.  The open nodes indicate nodes that are potentially part of the correct path and waiting to be scored.  Subsequently, the closed nodes are nodes that have been inspected and determined to be of a certain score.  Scoring individual nodes is the variable area of the algorithm.  Each node's score is based on the node's estimated distance to the goal plus it's heuristic score.  }{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Within a Sudoku puzzle the heuristic seems obvious.  Based on the context of the puzzle, each blank slot has nine possible choices.  These choices are quickly eliminated by the other numbers that are in the same 3x3 region or on the same row/column.  Therefore, an implementation of the heuristic for A* applied to Sudoku can be as simple as the number of possible choices for each blank.  The distance to goal is much more difficult to calculate.  In this implementation, the distance to goal is measured as a constant of one.  This makes an assumption that each blank node is of equal importance as every other blank.  }{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Another possible alternative is to attempt to calculate the distance to goal based on the affect that the node will have on all other nodes in the puzzle: The number of blanks in the 3x3 region plus the number of blanks on the same row and column.  This would produce a logical approach to enumerating the potential effect that giving the node a value and moving it to the closed list would have on the remaining open nodes.}{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\s28\itap0{\s28\f0\fs24\lang1033{\*\listtag0}\par}}@
